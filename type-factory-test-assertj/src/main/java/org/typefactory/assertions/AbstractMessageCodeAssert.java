package org.typefactory.assertions;

import org.assertj.core.api.AbstractObjectAssert;
import org.typefactory.MessageCode;

/**
 * Abstract base class for {@link MessageCode} specific assertions - Generated by CustomAssertionGenerator.
 */
@SuppressWarnings("java:S119") // Generic parameter naming
public abstract class AbstractMessageCodeAssert<SELF extends AbstractMessageCodeAssert<SELF, ACTUAL>, ACTUAL extends MessageCode> extends AbstractObjectAssert<SELF, ACTUAL> {

  /**
   * Creates a new <code>{@link AbstractMessageCodeAssert}</code> to make assertions on actual MessageCode.
   * @param actual the MessageCode we want to make assertions on.
   */
  protected AbstractMessageCodeAssert(ACTUAL actual, Class<SELF> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual MessageCode is blank.
   * @return this assertion object.
   * @throws AssertionError - if the actual MessageCode is not blank.
   */
  public SELF isBlank() {
    // check that actual MessageCode we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!actual.isBlank()) {
      failWithMessage("\nExpecting that actual MessageCode is blank but is not.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual MessageCode is not blank.
   * @return this assertion object.
   * @throws AssertionError - if the actual MessageCode is blank.
   */
  public SELF isNotBlank() {
    // check that actual MessageCode we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (actual.isBlank()) {
      failWithMessage("\nExpecting that actual MessageCode is not blank but is.");
    }

    // return the current assertion for method chaining
    return myself;
  }

}
