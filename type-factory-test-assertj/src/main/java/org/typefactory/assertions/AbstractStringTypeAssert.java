package org.typefactory.assertions;

import java.util.Objects;
import org.typefactory.CharSequenceType;
import org.typefactory.StringType;
import org.typefactory.Type;

/**
 * Abstract base class for {@link StringType} specific assertions - Generated by CustomAssertionGenerator.
 */
@SuppressWarnings("java:S119") // Generic parameter naming
public abstract class AbstractStringTypeAssert<SELF extends AbstractStringTypeAssert<SELF, ACTUAL>, ACTUAL extends CharSequenceType<ACTUAL>> extends
    AbstractCharSequenceTypeAssert<SELF, ACTUAL> {

  /**
   * Creates a new <code>{@link AbstractStringTypeAssert}</code> to make assertions on actual StringType.
   *
   * @param actual the StringType we want to make assertions on.
   */
  protected AbstractStringTypeAssert(ACTUAL actual, Class<SELF> selfType) {
    super(actual, selfType);
  }

  protected String classNameOfActual() {
    return actual == null ? "<? extends StringType>" : actual.getClass().getSimpleName();
  }

  protected boolean valueOfActualIsNull() {
    return Type.isNull(actual);
  }

  protected boolean valueOfActualIsEmpty() {
    return CharSequenceType.isEmpty(actual);
  }

  protected boolean valueOfActualIsBlank() {
    return CharSequenceType.isBlank(actual);
  }

  protected String valueOfActual() {
    return valueOfActualIsNull() ? null : Objects.toString(actual.value());
  }

  /**
   * Verifies that the actual StringType's {@code .value()} is equal to the given one.
   *
   * @param expected the given value to compare the actual StringType's {@code .value()} to.
   * @return this assertion object.
   * @throws AssertionError if the actual StringType's {@code .value()} is not equal to the given one.
   */
  public SELF hasValue(final String expected) {
    if (expected == null) {
      if (valueOfActualIsNull()) {
        return myself;
      } else {
        throw failure("Expected actual of type %s to have value of null but value was %s",
            classNameOfActual(), valueOfActual());
      }
    }
    if (valueOfActualIsNull()) {
      throw failure("Expected actual of type %s to have value of %s but value was null",
          classNameOfActual(), expected);
    }
    if (!Objects.equals(valueOfActual(), expected)) {
      throw failureWithActualExpected(
          valueOfActual(), expected,
          "Expected actual of type %s to have value of %s but value was %s",
          classNameOfActual(), expected, valueOfActual());
    }
    return myself;
  }

  /**
   * Verifies that the {@code actual} is null or the {@code actual} is an instance of {@code StringType} with an internal value of null.
   *
   * <pre>{@code
   * Examples                                   | .isNull() | .isNullOrNullInstance()
   * ------------------------------------------ | --------- | -----------------------
   * assertThat(actual = null)                  | succeeds  | succeeds
   * assertThat(actual = new StringType(null))  | fails     | succeeds
   * assertThat(actual = new StringType(""))    | fails     | fails
   * assertThat(actual = new StringType("abc")) | fails     | fails
   * }</pre>
   *
   * @throws AssertionError if the {@code actual} is not null or the {@code actual} is an instance of {@code StringType} with a non-null internal value.
   */
  public void isNullOrNullInstance() {
    if (valueOfActualIsNull()) {
      return;
    }
    throw failure("Expected actual of type %s to be null but was %s", classNameOfActual(), valueOfActual());
  }

  /**
   * Verifies that the {@code actual} is not null and the {@code actual} is an instance of {@code StringType} with a non-null internal value.
   *
   * <pre>{@code
   * StringTypeAssert.assertThat(actual = null).isNull(); // fails
   * StringTypeAssert.assertThat(actual = new StringType(null)).isNull(); // fails
   * StringTypeAssert.assertThat(actual = new StringType("")).isNull(); // succeeds
   * StringTypeAssert.assertThat(actual = new StringType("some-value")).isNull(); // succeeds
   * }</pre>
   *
   * @throws AssertionError if the {@code actual} is not null and the {@code actual} is an instance of {@code StringType} with a non-null internal value.
   */
  public SELF isNotNullNorNullInstance() {
    if (valueOfActualIsNull()) {
      throw failure("Expected actual of type %s to be non-null but was null", classNameOfActual());
    }
    return myself;
  }

  @Override
  public void isEmpty() {
    if (valueOfActualIsEmpty()) {
      return;
    }
    throw failure("Expected actual of type %s to be empty but was %s", classNameOfActual(), valueOfActual());
  }

  @Override
  public SELF isNotEmpty() {
    if (valueOfActualIsEmpty()) {
      throw failure("Expected actual of type %s to be non-empty but was empty", classNameOfActual());
    }
    return myself;
  }

  @Override
  public SELF isBlank() {
    if (valueOfActualIsBlank()) {
      return myself;
    }
    throw failure("Expected actual of type %s to be blank but was %s", classNameOfActual(), valueOfActual());
  }

  @Override
  public SELF isNotBlank() {
    if (valueOfActualIsBlank()) {
      throw failure("Expected actual of type %s to be non-blank but was blank", classNameOfActual());
    }
    return myself;
  }
}
