package org.typefactory.assertions;

import static org.assertj.core.util.introspection.FieldSupport.EXTRACTION;

import java.io.Serializable;
import java.util.Map;
import java.util.Objects;
import org.assertj.core.api.AbstractThrowableAssert;
import org.assertj.core.api.Assertions;
import org.typefactory.InvalidValueException;
import org.typefactory.InvalidValueException.ParserMessageCode;
import org.typefactory.MessageCode;

/**
 * Abstract base class for {@link InvalidValueException} specific assertions - Generated by CustomAssertionGenerator.
 */
@SuppressWarnings("java:S119") // Generic parameter naming
public abstract class AbstractInvalidValueExceptionAssert<SELF extends AbstractInvalidValueExceptionAssert<SELF, ACTUAL>, ACTUAL extends InvalidValueException>
    extends AbstractThrowableAssert<SELF, ACTUAL> {

  /**
   * Creates a new <code>{@link AbstractInvalidValueExceptionAssert}</code> to make assertions on actual InvalidValueException.
   * @param actual the InvalidValueException we want to make assertions on.
   */
  protected AbstractInvalidValueExceptionAssert(ACTUAL actual, Class<SELF> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual InvalidValueException's errorMessage is equal to the given one.
   * @param errorMessage the given errorMessage to compare the actual InvalidValueException's errorMessage to.
   * @return this assertion object.
   * @throws AssertionError - if the actual InvalidValueException's errorMessage is not equal to the given one.
   */
  public SELF hasErrorMessage(String errorMessage) {
    // check that actual InvalidValueException we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting errorMessage of:\n  %s\nto be:\n  %s\nbut was:\n  %s";

    // null safe check
    String actualErrorMessage = actual.getErrorMessage();
    if (!Objects.equals(actualErrorMessage, errorMessage)) {
      failWithMessage(assertjErrorMessage, actual, errorMessage, actualErrorMessage);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual InvalidValueException's invalidValue is equal to the given one.
   * @param invalidValue the given invalidValue to compare the actual InvalidValueException's invalidValue to.
   * @return this assertion object.
   * @throws AssertionError - if the actual InvalidValueException's invalidValue is not equal to the given one.
   */
  public SELF hasInvalidValue(String invalidValue) {
    // check that actual InvalidValueException we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting invalidValue of:\n  %s\nto be:\n  %s\nbut was:\n  %s";

    // null safe check
    String actualInvalidValue = actual.getInvalidValue();
    if (!Objects.equals(actualInvalidValue, invalidValue)) {
      failWithMessage(assertjErrorMessage, actual, invalidValue, actualInvalidValue);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual InvalidValueException's localizedMessage is equal to the given one.
   * @param localizedMessage the given localizedMessage to compare the actual InvalidValueException's localizedMessage to.
   * @return this assertion object.
   * @throws AssertionError - if the actual InvalidValueException's localizedMessage is not equal to the given one.
   */
  public SELF hasLocalizedMessage(String localizedMessage) {
    // check that actual InvalidValueException we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting localizedMessage of:\n  %s\nto be:\n  %s\nbut was:\n  %s";

    // null safe check
    String actualLocalizedMessage = actual.getLocalizedMessage();
    if (!Objects.equals(actualLocalizedMessage, localizedMessage)) {
      failWithMessage(assertjErrorMessage, actual, localizedMessage, actualLocalizedMessage);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual InvalidValueException's messageCode is equal to the given one.
   * @param messageCode the given messageCode to compare the actual InvalidValueException's messageCode to.
   * @return this assertion object.
   * @throws AssertionError - if the actual InvalidValueException's messageCode is not equal to the given one.
   */
  public SELF hasMessageCode(String messageCode) {
    // check that actual InvalidValueException we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting messageCode of:\n  %s\nto be:\n  %s\nbut was:\n  %s";

    // null safe check
    String actualMessageCode = actual.getMessageCode();
    if (!Objects.equals(actualMessageCode, messageCode)) {
      failWithMessage(assertjErrorMessage, actual, messageCode, actualMessageCode);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual InvalidValueException's parserErrorMessage is equal to the given one.
   * @param parserErrorMessage the given parserErrorMessage to compare the actual InvalidValueException's parserErrorMessage to.
   * @return this assertion object.
   * @throws AssertionError - if the actual InvalidValueException's parserErrorMessage is not equal to the given one.
   */
  public SELF hasParserErrorMessage(String parserErrorMessage) {
    // check that actual InvalidValueException we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting parserErrorMessage of:\n  %s\nto be:\n  %s\nbut was:\n  %s";

    // null safe check
    String actualParserErrorMessage = actual.getParserErrorMessage();
    if (!Objects.equals(actualParserErrorMessage, parserErrorMessage)) {
      failWithMessage(assertjErrorMessage, actual, parserErrorMessage, actualParserErrorMessage);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual InvalidValueException's parserErrorProperties is equal to the given one.
   * @param parserErrorProperties the given parserErrorProperties to compare the actual InvalidValueException's parserErrorProperties to.
   * @return this assertion object.
   * @throws AssertionError - if the actual InvalidValueException's parserErrorProperties is not equal to the given one.
   */
  public SELF hasParserErrorProperties(Map<String, Serializable> parserErrorProperties) {
    // check that actual InvalidValueException we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting parserErrorProperties of:\n  %s\nto be:\n  %s\nbut was:\n  %s";

    // null safe check
    Map<String, Serializable> actualParserErrorProperties = actual.getParserErrorProperties();
    if (!Objects.equals(actualParserErrorProperties, parserErrorProperties)) {
      failWithMessage(assertjErrorMessage, actual, parserErrorProperties, actualParserErrorProperties);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual InvalidValueException's parserMessageCode is equal to the given one.
   * @param expected the given parserMessageCode to compare the actual InvalidValueException's parserMessageCode to.
   * @return this assertion object.
   * @throws AssertionError - if the actual InvalidValueException's parserMessageCode is not equal to the given one.
   */
  public SELF hasParserMessageCode(String expected) {
    // check that actual InvalidValueException we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting parserMessageCode of:\n  %s\nto be:\n  %s\nbut was:\n  %s";

    // null safe check
    String actualParserMessageCode = actual.getParserMessageCode();
    if (!Objects.equals(actualParserMessageCode, expected)) {
      failWithMessage(assertjErrorMessage, actual, expected, actualParserMessageCode);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual InvalidValueException's targetTypeClass is equal to the given one.
   * @param targetTypeClass the given targetTypeClass to compare the actual InvalidValueException's targetTypeClass to.
   * @return this assertion object.
   * @throws AssertionError - if the actual InvalidValueException's targetTypeClass is not equal to the given one.
   */
  public SELF hasTargetTypeClass(Class<?> targetTypeClass) {
    // check that actual InvalidValueException we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting targetTypeClass of:\n  %s\nto be:\n  %s\nbut was:\n  %s";

    // null safe check
    Class<?> actualTargetTypeClass = actual.getTargetTypeClass();
    if (!Objects.equals(actualTargetTypeClass, targetTypeClass)) {
      failWithMessage(assertjErrorMessage, actual, targetTypeClass, actualTargetTypeClass);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual InvalidValueException's messageCode is equal to the given one.
   * @param messageCode the given messageCode to compare the actual InvalidValueException's messageCode to.
   * @return this assertion object.
   * @throws AssertionError - if the actual InvalidValueException's messageCode is not equal to the given one.
   */
  public SELF hasMessageCode(MessageCode messageCode) {
    // check that actual InvalidValueException we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting messageCode of:\n  %s\nto be:\n  %s\nbut was:\n  %s";

    // null safe check
    MessageCode actualMessageCode = EXTRACTION.fieldValue("messageCode", MessageCode.class, actual);
    if (!Objects.equals(actualMessageCode, messageCode)) {
      failWithMessage(assertjErrorMessage, actual, messageCode, actualMessageCode);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual InvalidValueException's parserMessageCode is equal to the given one.
   * @param parserMessageCode the given parserMessageCode to compare the actual InvalidValueException's parserMessageCode to.
   * @return this assertion object.
   * @throws AssertionError - if the actual InvalidValueException's parserMessageCode is not equal to the given one.
   */
  public SELF hasParserMessageCode(ParserMessageCode parserMessageCode) {
    // check that actual InvalidValueException we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting parserMessageCode of:\n  %s\nto be:\n  %s\nbut was:\n  %s";

    // null safe check
    ParserMessageCode actualParserMessageCode = EXTRACTION.fieldValue("parserMessageCode", ParserMessageCode.class, actual);
    if (!Objects.equals(actualParserMessageCode, parserMessageCode)) {
      failWithMessage(assertjErrorMessage, actual, parserMessageCode, actualParserMessageCode);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual InvalidValueException's parserMessageCodeArgs is equal to the given one.
   * @param parserMessageCodeArgs the given parserMessageCodeArgs to compare the actual InvalidValueException's parserMessageCodeArgs to.
   * @return this assertion object.
   * @throws AssertionError - if the actual InvalidValueException's parserMessageCodeArgs is not equal to the given one.
   */
  public SELF hasParserMessageCodeArgs(Map<String, Serializable> parserMessageCodeArgs) {
    // check that actual InvalidValueException we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting parserMessageCodeArgs of:\n  %s\nto be:\n  %s\nbut was:\n  %s";

    // null safe check
    Map<String, Serializable> actualParserMessageCodeArgs = EXTRACTION.fieldValue("parserMessageCodeArgs", Map.class, actual);
    if (!Objects.equals(actualParserMessageCodeArgs, parserMessageCodeArgs)) {
      failWithMessage(assertjErrorMessage, actual, parserMessageCodeArgs, actualParserMessageCodeArgs);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual InvalidValueException's parserMessageCodeArgsValues contains the given java.io.Serializable elements.
   * @param parserMessageCodeArgsValues the given elements that should be contained in actual InvalidValueException's parserMessageCodeArgsValues.
   * @return this assertion object.
   * @throws AssertionError if the actual InvalidValueException's parserMessageCodeArgsValues does not contain all given java.io.Serializable elements.
   */
  public SELF hasParserMessageCodeArgsValues(Serializable... parserMessageCodeArgsValues) {
    // check that actual InvalidValueException we want to make assertions on is not null.
    isNotNull();

    // check that given java.io.Serializable varargs is not null.
    if (parserMessageCodeArgsValues == null) failWithMessage("Expecting parserMessageCodeArgsValues parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(EXTRACTION.fieldValue("parserMessageCodeArgsValues", Serializable[].class, actual)).contains(parserMessageCodeArgsValues);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual InvalidValueException's parserMessageCodeArgsValues contains <b>only</b> the given java.io.Serializable elements and nothing else in whatever order.
   *
   * @param parserMessageCodeArgsValues the given elements that should be contained in actual InvalidValueException's parserMessageCodeArgsValues.
   * @return this assertion object.
   * @throws AssertionError if the actual InvalidValueException's parserMessageCodeArgsValues does not contain all given java.io.Serializable elements and nothing else.
   */
  public SELF hasOnlyParserMessageCodeArgsValues(Serializable... parserMessageCodeArgsValues) {
    // check that actual InvalidValueException we want to make assertions on is not null.
    isNotNull();

    // check that given java.io.Serializable varargs is not null.
    if (parserMessageCodeArgsValues == null) failWithMessage("Expecting parserMessageCodeArgsValues parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(EXTRACTION.fieldValue("parserMessageCodeArgsValues", Serializable[].class, actual)).containsOnly(parserMessageCodeArgsValues);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual InvalidValueException's parserMessageCodeArgsValues does not contain the given java.io.Serializable elements.
   *
   * @param parserMessageCodeArgsValues the given elements that should not be in actual InvalidValueException's parserMessageCodeArgsValues.
   * @return this assertion object.
   * @throws AssertionError if the actual InvalidValueException's parserMessageCodeArgsValues contains any given java.io.Serializable elements.
   */
  public SELF doesNotHaveParserMessageCodeArgsValues(Serializable... parserMessageCodeArgsValues) {
    // check that actual InvalidValueException we want to make assertions on is not null.
    isNotNull();

    // check that given java.io.Serializable varargs is not null.
    if (parserMessageCodeArgsValues == null) failWithMessage("Expecting parserMessageCodeArgsValues parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(EXTRACTION.fieldValue("parserMessageCodeArgsValues", Serializable[].class, actual)).doesNotContain(parserMessageCodeArgsValues);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual InvalidValueException has no parserMessageCodeArgsValues.
   * @return this assertion object.
   * @throws AssertionError if the actual InvalidValueException's parserMessageCodeArgsValues is not empty.
   */
  public SELF hasNoParserMessageCodeArgsValues() {
    // check that actual InvalidValueException we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  %s\nnot to have parserMessageCodeArgsValues but had :\n  %s";

    // check that it is not empty
    if (EXTRACTION.fieldValue("parserMessageCodeArgsValues", Serializable[].class, actual).length > 0)  {
      failWithMessage(assertjErrorMessage, actual, java.util.Arrays.toString(
          EXTRACTION.fieldValue("parserMessageCodeArgsValues", Serializable[].class, actual)));
    }

    // return the current assertion for method chaining
    return myself;
  }


}
