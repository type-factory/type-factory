package org.typefactory.assertions;

import java.util.Objects;
import org.assertj.core.api.AbstractComparableAssert;
import org.assertj.core.api.IntegerAssert;
import org.typefactory.IntegerType;
import org.typefactory.Type;

/**
 * Abstract base class for {@link IntegerType} specific assertions - Generated by CustomAssertionGenerator.
 */
@SuppressWarnings("java:S119") // Generic parameter naming
public abstract class AbstractIntegerTypeAssert<SELF extends AbstractIntegerTypeAssert<SELF, ACTUAL>, ACTUAL extends IntegerType>
    extends AbstractComparableAssert<SELF, ACTUAL> {

  /**
   * Creates a new <code>{@link AbstractIntegerTypeAssert}</code> to make assertions on actual IntegerType.
   * @param actual the IntegerType we want to make assertions on.
   */
  protected AbstractIntegerTypeAssert(ACTUAL actual, Class<SELF> selfType) {
    super(actual, selfType);
  }

  private String simpleClassNameOfActual() {
    return actual == null ? "custom type extending StringType" : actual.getClass().getSimpleName();
  }

  private String valueOfActual() {
    return Type.isNull(actual) ? "null" : Objects.toString(actual.value());
  }

  public IntegerAssert valueSatisfies() {
    return new IntegerAssert(actual.value());
  }

  public SELF hasValue(int expected) {
    isNotNull();
    if (!Objects.equals(actual.value(), expected)) {
      throw failureWithActualExpected(
          valueOfActual(), expected,
          "Expected %s value to be <%s> but was <%s>",
          simpleClassNameOfActual(), expected, valueOfActual());
    }
    return myself;
  }

  public SELF hasValue(Integer expected) {
    if (expected == null) {
      if (Type.isNull(actual)) {
        return myself;
      } else {
        throw failureWithActualExpected(
            valueOfActual(), expected,
            "Expected %s value to be <%s> but was <%s>",
            simpleClassNameOfActual(), expected, valueOfActual());
      }
    }
    return hasValue(expected.intValue());
  }

  @Override
  public void isNull() {
    if (Type.isNull(actual)) {
      return;
    }
    throw failure("Expected %s value to be null but was <%s>", simpleClassNameOfActual(), valueOfActual());
  }

  @Override
  public SELF isNotNull() {
    if (Type.isNull(actual)) {
      throw failure("Expected %s value to be non-null but was null", simpleClassNameOfActual());
    }
    return myself;
  }

}
