# This workflow will build a package using Maven and then publish it to to the Maven Central Repository when a release is created
# For more information see: 
# - https://docs.github.com/en/actions/publishing-packages/publishing-java-packages-with-maven
# - https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#apache-maven-with-a-settings-path

name: Publish to Maven Central Repository

on:
  workflow_dispatch:
    inputs:
      RELEASE_VERSION_NUMBER_OVERRIDE:
        description: 'Optional override release version number (leave empty for default)'
        required: false
      NEXT_VERSION_NUMBER_OVERRIDE:
        description: 'Optional override next version number (leave empty for default)'
        required: false

jobs:
  publish:
    # Check that this is being executed on 'main' or a 'release-N.x.x' branch
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release-')
    runs-on: ubuntu-latest
    steps:
      - id: checkout-code
        name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.WORKFLOW_ACTIONS_BOT_ACCESS_TOKEN }}
      - id: setup-java-and-maven-settings  
        name: Set up Java and Maven Central Repository
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          # The following creates a <server> block in the Maven settings.xml
          server-id: ossrh
          server-username: OSSRH_USERNAME
          server-password: OSSRH_PASSWORD
      - id: build-and-verify-with-maven
        name: Build and verify with Maven
        run: mvn --batch-mode -Dlogging.level.org.typefactory=WARNING --file pom.xml clean verify
      - id: configure-gpg-secret-key
        name: Configure gpg secret key
        run: |
          cat <(echo -e "${{ secrets.OSSRH_GPG_SECRET_KEY }}") | gpg --batch --import
          gpg --list-secret-keys --keyid-format LONG
      - id: publish-to-central
        name: Publish to Maven Central Repository
        env:
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
        shell: bash
        run: |
          CURRENT_VERSION="$(mvn --batch-mode --quiet -Dexpression=project.version -DforceStdout help:evaluate)" &&
          RELEASE_VERSION="${CURRENT_VERSION%-SNAPSHOT}" &&
          CURRENT_PATCH_VERSION="${RELEASE_VERSION##*.}" &&
          NEXT_SNAPSHOT_VERSION="${RELEASE_VERSION%.*}.$((CURRENT_PATCH_VERSION + 1))-SNAPSHOT" &&
          if [[ "${INPUT_RELEASE_VERSION_NUMBER_OVERRIDE}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]] ; then
            RELEASE_VERSION="${INPUT_RELEASE_VERSION_NUMBER_OVERRIDE}"
          fi &&
          if [[ "${INPUT_NEXT_VERSION_NUMBER_OVERRIDE}" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-SNAPSHOT)?$ ]] ; then
            NEXT_SNAPSHOT_VERSION="${INPUT_NEXT_VERSION_NUMBER_OVERRIDE%-SNAPSHOT}-SNAPSHOT"
          fi &&
          RELEASE_TAG="v${RELEASE_VERSION}" &&
          echo &&
          echo "CURRENT_VERSION=${CURRENT_VERSION}" &&
          echo "RELEASE_VERSION=${RELEASE_VERSION}" &&
          echo "RELEASE_TAG=${RELEASE_TAG}" &&
          echo "NEXT_SNAPSHOT_VERSION=${NEXT_SNAPSHOT_VERSION}" &&
          echo &&
          echo "Update version for release to ${RELEASE_VERSION} – version was ${CURRENT_VERSION}" &&
          mvn --batch-mode --quiet -DnewVersion="${RELEASE_VERSION}" -DprocessAllModules=true versions:set &&
          echo &&
          echo "Committing to local branch" &&
          git config user.signingKey "${{ secrets.WORKFLOW_ACTIONS_GPG_SIGNING_KEY_ID }}" &&
          git config user.email "GitHub Actions Bot" &&
          git config user.name "GitHub Actions Bot" &&
          git commit --all --message "Update version for release to ${RELEASE_VERSION} – version was ${CURRENT_VERSION}" &&
          echo &&
          echo "Creating Git tag ${RELEASE_TAG}" &&
          git tag -s "${RELEASE_TAG}" -m "Tagging version for release ${RELEASE_VERSION}" &&
          echo &&
          echo "Deploying the application" &&
          mvn --batch-mode -Dmaven.test.skip=true -Dlogging.level.org.typefactory=WARNING deploy &&
          echo &&
          echo "Pushing to GitHub – ${RELEASE_VERSION}" &&
          git push origin && git push origin "${RELEASE_TAG}" &&
          echo &&
          echo "Update to next snapshot version ${NEXT_SNAPSHOT_VERSION} – from release version of ${RELEASE_VERSION}" &&
          mvn --batch-mode --quiet -DnewVersion="${NEXT_SNAPSHOT_VERSION}" -DprocessAllModules=true versions:set &&
          echo &&
          echo "Committing to local branch" &&
          git commit --all --message "Update to next snapshot version ${NEXT_SNAPSHOT_VERSION} – from release version of ${RELEASE_VERSION}" &&
          echo &&
          echo "Pushing to GitHub – ${NEXT_SNAPSHOT_VERSION}" &&
          git push origin
